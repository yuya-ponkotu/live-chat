{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VMenu.css\"; // Components\n\nimport { VOverlay } from \"../VOverlay/index.mjs\";\nimport { VDialogTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, getUid } from \"../../util/index.mjs\"; // Types\n\nexport const VMenu = genericComponent()({\n  name: 'VMenu',\n  inheritAttrs: false,\n  props: {\n    // TODO\n    // closeOnClick: {\n    //   type: Boolean,\n    //   default: true,\n    // },\n    // closeOnContentClick: {\n    //   type: Boolean,\n    //   default: true,\n    // },\n    disableKeys: Boolean,\n    modelValue: Boolean,\n    id: String,\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const uid = getUid();\n    const id = computed(() => props.id || `v-menu-${uid}`);\n    return () => {\n      return _createVNode(VOverlay, _mergeProps({\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"class\": ['v-menu'],\n        \"transition\": props.transition,\n        \"absolute\": true,\n        \"positionStrategy\": \"connected\",\n        \"scrollStrategy\": \"reposition\",\n        \"scrim\": false,\n        \"activatorProps\": {\n          'aria-haspopup': 'menu',\n          'aria-expanded': String(isActive.value),\n          'aria-owns': id.value\n        }\n      }, attrs), {\n        default: slots.default,\n        activator: slots.activator\n      });\n    };\n  }\n\n});","map":{"version":3,"mappings":"qHAAA;;AACA,qB,CAEA;;SACSA,gB;SACAC,yB,4BAET;;SACSC,2B;SACAC,uB,sCAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,kBAAkBC,c,wBAE3B;;AAGA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,GAEhC;AACHG,MAAI,EAAE,OADH;AAGHC,cAAY,EAAE,KAHX;AAKHC,OAAK,EAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,eAAW,EAAEC,OAVR;AAWLC,cAAU,EAAED,OAXP;AAYLE,MAAE,EAAEC,MAZC;AAcL,OAAGb,mBAAmB,CAAC;AACrBc,gBAAU,EAAE;AAAEC,iBAAS,EAAEhB;AAAb;AADS,KAAD;AAdjB,GALJ;AAwBHiB,OAAK,EAAE;AACL,yBAAsBC,KAAD,IAAoB;AADpC,GAxBJ;;AA4BHC,OAAK,CAAEV,KAAF,QAA2B;AAAA,QAAlB;AAAEW,WAAF;AAASC;AAAT,QAAkBC;AAC9B,UAAMC,QAAQ,GAAGrB,eAAe,CAACO,KAAD,EAAQ,YAAR,CAAhC;AAEA,UAAMe,GAAG,GAAGnB,MAAM,EAAlB;AACA,UAAMQ,EAAE,GAAGV,QAAQ,CAAC,MAAMM,KAAK,CAACI,EAANJ,IAAa,UAASe,GAAI,EAAjC,CAAnB;AAEA,WAAO,MAAM;AACX;AAAA,sBAEcD,QAAQ,CAACL,KAFvB;AAAA,yCAEcK,QAAQ,CAACL,KAATK,GAFdE;AAAA,iBAGW,CACL,QADK,CAHX;AAAA,sBAMiBhB,KAAK,CAACM,UANvB;AAAA;AAAA,4BAQqB,WARrB;AAAA,0BASmB,YATnB;AAAA,iBAUY,KAVZ;AAAA,0BAWoB;AACd,2BAAiB,MADH;AAEd,2BAAiBD,MAAM,CAACS,QAAQ,CAACL,KAAV,CAFT;AAGd,uBAAaL,EAAE,CAACK;AAHF;AAXpB,SAgBSE,KAhBT,GAiBa;AACPM,eAAO,EAAEL,KAAK,CAACK,OADR;AAEPC,iBAAS,EAAEN,KAAK,CAACM;AAFV,OAjBb;AADF;AAyBD;;AA3DE,CAFgC,CAA9B","names":["VOverlay","VDialogTransition","makeTransitionProps","useProxiedModel","computed","genericComponent","getUid","VMenu","name","inheritAttrs","props","disableKeys","Boolean","modelValue","id","String","transition","component","emits","value","setup","attrs","slots","_ref","isActive","uid","$event","default","activator"],"sources":["../../../src/components/VMenu/VMenu.tsx"],"sourcesContent":["// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\nimport { VDialogTransition } from '@/components/transitions'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, getUid } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VMenu = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VMenu',\n\n  inheritAttrs: false,\n\n  props: {\n    // TODO\n    // closeOnClick: {\n    //   type: Boolean,\n    //   default: true,\n    // },\n    // closeOnContentClick: {\n    //   type: Boolean,\n    //   default: true,\n    // },\n    disableKeys: Boolean,\n    modelValue: Boolean,\n    id: String,\n\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    return () => {\n      return (\n        <VOverlay\n          v-model={ isActive.value }\n          class={[\n            'v-menu',\n          ]}\n          transition={ props.transition }\n          absolute\n          positionStrategy=\"connected\"\n          scrollStrategy=\"reposition\"\n          scrim={ false }\n          activatorProps={{\n            'aria-haspopup': 'menu',\n            'aria-expanded': String(isActive.value),\n            'aria-owns': id.value,\n          }}\n          { ...attrs }\n          v-slots={{\n            default: slots.default,\n            activator: slots.activator,\n          }}\n        />\n      )\n    }\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n"]},"metadata":{},"sourceType":"module"}