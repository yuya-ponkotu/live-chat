{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, vShow as _vShow, Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VOverlay.css\"; // Composables\n\nimport { makeActivatorProps, useActivator } from \"./useActivator.mjs\";\nimport { makePositionStrategyProps, usePositionStrategies } from \"./positionStrategies.mjs\";\nimport { makeScrollStrategyProps, useScrollStrategies } from \"./scrollStrategies.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useBackButton } from \"../../composables/router.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useRtl } from \"../../composables/rtl.mjs\";\nimport { useTeleport } from \"../../composables/teleport.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\";\nimport { useStack } from \"../../composables/stack.mjs\";\nimport { useOverlay } from \"../../composables/overlay.mjs\"; // Directives\n\nimport { ClickOutside } from \"../../directives/click-outside/index.mjs\"; // Utilities\n\nimport { convertToUnit, genericComponent, getScrollParent, IN_BROWSER, standardEasing, useRender } from \"../../util/index.mjs\";\nimport { computed, mergeProps, ref, Teleport, toHandlers, Transition, watch } from 'vue'; // Types\n\nfunction Scrim(props) {\n  const {\n    modelValue,\n    color,\n    ...rest\n  } = props;\n  return _createVNode(Transition, {\n    \"name\": \"fade-transition\",\n    \"appear\": true\n  }, {\n    default: () => [props.modelValue && _createVNode(\"div\", _mergeProps({\n      \"class\": ['v-overlay__scrim', props.color.backgroundColorClasses.value],\n      \"style\": props.color.backgroundColorStyles.value\n    }, rest), null)]\n  });\n}\n\nexport const VOverlay = genericComponent()({\n  name: 'VOverlay',\n  directives: {\n    ClickOutside\n  },\n  inheritAttrs: false,\n  props: {\n    absolute: Boolean,\n    attach: [Boolean, String, Object],\n    contained: Boolean,\n    contentClass: null,\n    noClickAnimation: Boolean,\n    modelValue: Boolean,\n    persistent: Boolean,\n    scrim: {\n      type: [String, Boolean],\n      default: true\n    },\n    ...makeActivatorProps(),\n    ...makeDimensionProps(),\n    ...makePositionStrategyProps(),\n    ...makeScrollStrategyProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps(),\n    ...makeLazyProps()\n  },\n  emits: {\n    'click:outside': e => true,\n    'update:modelValue': value => true,\n    afterLeave: () => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs,\n      emit\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      teleportTarget\n    } = useTeleport(computed(() => props.attach || props.contained));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, isActive);\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null;\n    }));\n    const {\n      activatorEl,\n      activatorRef,\n      activatorEvents\n    } = useActivator(props, isActive);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      isTop\n    } = useStack(isActive);\n    const root = ref();\n    const contentEl = ref();\n    const {\n      contentStyles,\n      updatePosition\n    } = usePositionStrategies(props, {\n      contentEl,\n      activatorEl,\n      isActive\n    });\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updatePosition\n    });\n\n    function onClickOutside(e) {\n      emit('click:outside', e);\n      if (!props.persistent) isActive.value = false;else animateClick();\n    }\n\n    function closeConditional() {\n      return isActive.value && isTop.value;\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown);\n      } else {\n        window.removeEventListener('keydown', onKeydown);\n      }\n    }, {\n      immediate: true\n    });\n\n    function onKeydown(e) {\n      if (e.key === 'Escape' && isTop.value) {\n        if (!props.persistent) {\n          isActive.value = false;\n        } else animateClick();\n      }\n    }\n\n    useBackButton(next => {\n      if (isTop.value && isActive.value) {\n        next(false);\n        if (!props.persistent) isActive.value = false;else animateClick();\n      } else {\n        next();\n      }\n    });\n    const top = ref();\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value);\n\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop;\n        }\n      }\n    }); // Add a quick \"bounce\" animation to the content\n\n    function animateClick() {\n      var _contentEl$value;\n\n      if (props.noClickAnimation) return;\n      (_contentEl$value = contentEl.value) == null ? void 0 : _contentEl$value.animate([{\n        transformOrigin: 'center'\n      }, {\n        transform: 'scale(1.03)'\n      }, {\n        transformOrigin: 'center'\n      }], {\n        duration: 150,\n        easing: standardEasing\n      });\n    }\n\n    const {\n      overlayZIndex\n    } = useOverlay(isActive);\n    useRender(() => {\n      var _slots$activator, _slots$default;\n\n      return _createVNode(_Fragment, null, [(_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {\n        isActive: isActive.value,\n        props: mergeProps({\n          ref: activatorRef\n        }, toHandlers(activatorEvents.value), props.activatorProps)\n      }), IN_BROWSER && _createVNode(Teleport, {\n        \"disabled\": !teleportTarget.value,\n        \"to\": teleportTarget.value\n      }, {\n        default: () => [hasContent.value && _createVNode(\"div\", _mergeProps({\n          \"class\": ['v-overlay', {\n            'v-overlay--absolute': props.absolute || props.contained,\n            'v-overlay--active': isActive.value,\n            'v-overlay--contained': props.contained\n          }, themeClasses.value, rtlClasses.value],\n          \"style\": {\n            top: convertToUnit(top.value),\n            zIndex: overlayZIndex.value\n          },\n          \"ref\": root\n        }, attrs), [_createVNode(Scrim, {\n          \"color\": scrimColor,\n          \"modelValue\": isActive.value && !!props.scrim\n        }, null), _createVNode(MaybeTransition, {\n          \"appear\": true,\n          \"persisted\": true,\n          \"transition\": props.transition,\n          \"target\": activatorEl.value,\n          \"onAfterLeave\": () => {\n            onAfterLeave();\n            emit('afterLeave');\n          }\n        }, {\n          default: () => [_withDirectives(_createVNode(\"div\", {\n            \"ref\": contentEl,\n            \"class\": ['v-overlay__content', props.contentClass],\n            \"style\": [dimensionStyles.value, contentStyles.value]\n          }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n            isActive\n          })]), [[_vShow, isActive.value], [_resolveDirective(\"click-outside\"), {\n            handler: onClickOutside,\n            closeConditional,\n            include: () => [activatorEl.value]\n          }]])]\n        })])]\n      })]);\n    });\n    return {\n      animateClick,\n      contentEl,\n      activatorEl\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeActivatorProps","useActivator","makePositionStrategyProps","usePositionStrategies","makeScrollStrategyProps","useScrollStrategies","makeThemeProps","provideTheme","makeTransitionProps","MaybeTransition","useBackButton","useBackgroundColor","useProxiedModel","useRtl","useTeleport","makeDimensionProps","useDimension","makeLazyProps","useLazy","useStack","useOverlay","ClickOutside","convertToUnit","genericComponent","getScrollParent","IN_BROWSER","standardEasing","useRender","computed","mergeProps","ref","Teleport","toHandlers","Transition","watch","Scrim","props","modelValue","color","rest","default","backgroundColorClasses","value","backgroundColorStyles","VOverlay","name","directives","inheritAttrs","absolute","Boolean","attach","String","Object","contained","contentClass","noClickAnimation","persistent","scrim","type","emits","e","afterLeave","setup","slots","attrs","emit","_ref","isActive","teleportTarget","themeClasses","rtlClasses","hasContent","onAfterLeave","scrimColor","activatorEl","activatorRef","activatorEvents","dimensionStyles","isTop","root","contentEl","contentStyles","updatePosition","onClickOutside","animateClick","closeConditional","val","window","addEventListener","onKeydown","removeEventListener","immediate","key","next","top","scrollParent","document","scrollingElement","scrollTop","animate","transformOrigin","transform","duration","easing","overlayZIndex","activator","_slots$activator","activatorProps","zIndex","transition","_slots$default","handler","include"],"sources":["../../../src/components/VOverlay/VOverlay.tsx"],"sourcesContent":["// Styles\nimport './VOverlay.sass'\n\n// Composables\nimport { makeActivatorProps, useActivator } from './useActivator'\nimport { makePositionStrategyProps, usePositionStrategies } from './positionStrategies'\nimport { makeScrollStrategyProps, useScrollStrategies } from './scrollStrategies'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackButton } from '@/composables/router'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/rtl'\nimport { useTeleport } from '@/composables/teleport'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { useStack } from '@/composables/stack'\nimport { useOverlay } from '@/composables/overlay'\n\n// Directives\nimport { ClickOutside } from '@/directives/click-outside'\n\n// Utilities\nimport {\n  convertToUnit,\n  genericComponent,\n  getScrollParent,\n  IN_BROWSER,\n  standardEasing,\n  useRender,\n} from '@/util'\nimport {\n  computed,\n  mergeProps,\n  ref,\n  Teleport,\n  toHandlers,\n  Transition,\n  watch,\n} from 'vue'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { BackgroundColorData } from '@/composables/color'\n\ninterface ScrimProps {\n  [key: string]: unknown\n  modelValue: boolean\n  color: BackgroundColorData\n}\nfunction Scrim (props: ScrimProps) {\n  const { modelValue, color, ...rest } = props\n  return (\n    <Transition name=\"fade-transition\" appear>\n      { props.modelValue && (\n        <div\n          class={[\n            'v-overlay__scrim',\n            props.color.backgroundColorClasses.value,\n          ]}\n          style={ props.color.backgroundColorStyles.value }\n          { ...rest }\n        />\n      )}\n    </Transition>\n  )\n}\n\nexport type OverlaySlots = MakeSlots<{\n  default: [{ isActive: Ref<boolean> }]\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n}>\n\nexport const VOverlay = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VOverlay',\n\n  directives: { ClickOutside },\n\n  inheritAttrs: false,\n\n  props: {\n    absolute: Boolean,\n    attach: [Boolean, String, Object] as PropType<boolean | string | Element>,\n    contained: Boolean,\n    contentClass: null,\n    noClickAnimation: Boolean,\n    modelValue: Boolean,\n    persistent: Boolean,\n    scrim: {\n      type: [String, Boolean],\n      default: true,\n    },\n\n    ...makeActivatorProps(),\n    ...makeDimensionProps(),\n    ...makePositionStrategyProps(),\n    ...makeScrollStrategyProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps(),\n    ...makeLazyProps(),\n  },\n\n  emits: {\n    'click:outside': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { slots, attrs, emit }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { teleportTarget } = useTeleport(computed(() => props.attach || props.contained))\n    const { themeClasses } = provideTheme(props)\n    const { rtlClasses } = useRtl()\n    const { hasContent, onAfterLeave } = useLazy(props, isActive)\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null\n    }))\n    const { activatorEl, activatorRef, activatorEvents } = useActivator(props, isActive)\n    const { dimensionStyles } = useDimension(props)\n    const { isTop } = useStack(isActive)\n\n    const root = ref<HTMLElement>()\n    const contentEl = ref<HTMLElement>()\n    const { contentStyles, updatePosition } = usePositionStrategies(props, {\n      contentEl,\n      activatorEl,\n      isActive,\n    })\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updatePosition,\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      emit('click:outside', e)\n\n      if (!props.persistent) isActive.value = false\n      else animateClick()\n    }\n\n    function closeConditional () {\n      return isActive.value && isTop.value\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown)\n      } else {\n        window.removeEventListener('keydown', onKeydown)\n      }\n    }, { immediate: true })\n\n    function onKeydown (e: KeyboardEvent) {\n      if (e.key === 'Escape' && isTop.value) {\n        if (!props.persistent) {\n          isActive.value = false\n        } else animateClick()\n      }\n    }\n\n    useBackButton(next => {\n      if (isTop.value && isActive.value) {\n        next(false)\n        if (!props.persistent) isActive.value = false\n        else animateClick()\n      } else {\n        next()\n      }\n    })\n\n    const top = ref<number>()\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value)\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop\n        }\n      }\n    })\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick () {\n      if (props.noClickAnimation) return\n\n      contentEl.value?.animate([\n        { transformOrigin: 'center' },\n        { transform: 'scale(1.03)' },\n        { transformOrigin: 'center' },\n      ], {\n        duration: 150,\n        easing: standardEasing,\n      })\n    }\n\n    const { overlayZIndex } = useOverlay(isActive)\n\n    useRender(() => (\n      <>\n        { slots.activator?.({\n          isActive: isActive.value,\n          props: mergeProps({\n            ref: activatorRef,\n          }, toHandlers(activatorEvents.value), props.activatorProps),\n        }) }\n\n        { IN_BROWSER && (\n          <Teleport\n            disabled={ !teleportTarget.value }\n            to={ teleportTarget.value }\n          >\n            { hasContent.value && (\n              <div\n                class={[\n                  'v-overlay',\n                  {\n                    'v-overlay--absolute': props.absolute || props.contained,\n                    'v-overlay--active': isActive.value,\n                    'v-overlay--contained': props.contained,\n                  },\n                  themeClasses.value,\n                  rtlClasses.value,\n                ]}\n                style={{\n                  top: convertToUnit(top.value),\n                  zIndex: overlayZIndex.value,\n                }}\n                ref={ root }\n                {...attrs}\n              >\n                <Scrim\n                  color={ scrimColor }\n                  modelValue={ isActive.value && !!props.scrim }\n                />\n                <MaybeTransition\n                  appear\n                  persisted\n                  transition={ props.transition }\n                  target={ activatorEl.value }\n                  onAfterLeave={() => { onAfterLeave(); emit('afterLeave') }}\n                >\n                  <div\n                    ref={ contentEl }\n                    v-show={ isActive.value }\n                    v-click-outside={{ handler: onClickOutside, closeConditional, include: () => [activatorEl.value] }}\n                    class={[\n                      'v-overlay__content',\n                      props.contentClass,\n                    ]}\n                    style={[\n                      dimensionStyles.value,\n                      contentStyles.value,\n                    ]}\n                  >\n                    { slots.default?.({ isActive }) }\n                  </div>\n                </MaybeTransition>\n              </div>\n            )}\n          </Teleport>\n        ) }\n      </>\n    ))\n\n    return {\n      animateClick,\n      contentEl,\n      activatorEl,\n    }\n  },\n})\n\nexport type VOverlay = InstanceType<typeof VOverlay>\n"]},"metadata":{},"sourceType":"module"}