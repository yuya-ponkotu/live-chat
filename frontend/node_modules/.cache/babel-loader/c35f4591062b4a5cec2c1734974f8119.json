{"ast":null,"code":"// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue';\nimport { getUid } from \"../util/index.mjs\"; // Types\n\nexport const VuetifyOverlayKey = Symbol.for('vuetify:overlay');\nconst ROOT_ZINDEX = 2000;\nexport function useOverlay(isActive) {\n  const {\n    zIndex,\n    overlays\n  } = inject(VuetifyOverlayKey, {\n    zIndex: ref(ROOT_ZINDEX),\n    overlays: ref([])\n  });\n  const id = getUid();\n  watch(isActive, value => {\n    if (value) {\n      overlays.value.push(id);\n    } else {\n      overlays.value = overlays.value.filter(x => x !== id);\n    }\n  }, {\n    immediate: true\n  });\n  provide(VuetifyOverlayKey, {\n    zIndex,\n    overlays\n  });\n  const overlayZIndex = computed(() => zIndex.value + overlays.value.indexOf(id) + 1);\n  return {\n    overlayZIndex\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;SACSC,c,qBAET;;AAQA,OAAO,MAAMC,iBAA+C,GAAGC,MAAM,CAACC,GAAPD,CAAW,iBAAXA,CAAxD;AAEP,MAAME,WAAW,GAAG,IAApB;AAEA,OAAO,SAASC,UAAT,CAAqBC,QAArB,EAAyD;AAC9D,QAAM;AAAEC,UAAF;AAAUC;AAAV,MAAuBZ,MAAM,CAACK,iBAAD,EAAoB;AAAEM,UAAM,EAAET,GAAG,CAACM,WAAD,CAAb;AAA4BI,YAAQ,EAAEV,GAAG,CAAC,EAAD;AAAzC,GAApB,CAAnC;AAEA,QAAMW,EAAE,GAAGT,MAAM,EAAjB;AAEAD,OAAK,CAACO,QAAD,EAAWI,KAAK,IAAI;AACvB,QAAIA,KAAJ,EAAW;AACTF,cAAQ,CAACE,KAATF,CAAeG,IAAfH,CAAoBC,EAApBD;AADF,WAEO;AACLA,cAAQ,CAACE,KAATF,GAAiBA,QAAQ,CAACE,KAATF,CAAeI,MAAfJ,CAAsBK,CAAC,IAAIA,CAAC,KAAKJ,EAAjCD,CAAjBA;AACD;AALE,KAMF;AACDM,aAAS,EAAE;AADV,GANE,CAALf;AAUAF,SAAO,CAACI,iBAAD,EAAoB;AAAEM,UAAF;AAAUC;AAAV,GAApB,CAAPX;AAEA,QAAMkB,aAAa,GAAGpB,QAAQ,CAAC,MAAMY,MAAM,CAACG,KAAPH,GAAeC,QAAQ,CAACE,KAATF,CAAeQ,OAAfR,CAAuBC,EAAvBD,CAAfD,GAA4C,CAAnD,CAA9B;AAEA,SAAO;AAAEQ;AAAF,GAAP;AACD","names":["computed","inject","provide","ref","watch","getUid","VuetifyOverlayKey","Symbol","for","ROOT_ZINDEX","useOverlay","isActive","zIndex","overlays","id","value","push","filter","x","immediate","overlayZIndex","indexOf"],"sources":["../../src/composables/overlay.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { getUid } from '@/util'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\ntype OverlayProvide = {\n  overlays: Ref<number[]>\n  zIndex: Ref<number>\n}\n\nexport const VuetifyOverlayKey: InjectionKey<OverlayProvide> = Symbol.for('vuetify:overlay')\n\nconst ROOT_ZINDEX = 2000\n\nexport function useOverlay (isActive: Ref<boolean | undefined>) {\n  const { zIndex, overlays } = inject(VuetifyOverlayKey, { zIndex: ref(ROOT_ZINDEX), overlays: ref([]) })\n\n  const id = getUid()\n\n  watch(isActive, value => {\n    if (value) {\n      overlays.value.push(id)\n    } else {\n      overlays.value = overlays.value.filter(x => x !== id)\n    }\n  }, {\n    immediate: true,\n  })\n\n  provide(VuetifyOverlayKey, { zIndex, overlays })\n\n  const overlayZIndex = computed(() => zIndex.value + overlays.value.indexOf(id) + 1)\n\n  return { overlayZIndex }\n}\n"]},"metadata":{},"sourceType":"module"}