{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VDivider } from \"../VDivider/index.mjs\";\nimport { VListGroup } from \"./VListGroup.mjs\";\nimport { VListItem } from \"./VListItem.mjs\";\nimport { VListSubheader } from \"./VListSubheader.mjs\"; // Utilities\n\nimport { genericComponent } from \"../../util/index.mjs\";\nimport { createList } from \"./list.mjs\"; // Types\n\nexport const VListChildren = genericComponent()({\n  name: 'VListChildren',\n  props: {\n    items: Array\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    createList();\n    return () => {\n      var _slots$default, _slots$default2, _props$items;\n\n      return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : (_props$items = props.items) == null ? void 0 : _props$items.map(_ref2 => {\n        let {\n          children,\n          props: itemProps,\n          type\n        } = _ref2;\n        if (type === 'divider') return _createVNode(VDivider, itemProps, null);\n        if (type === 'subheader') return _createVNode(VListSubheader, itemProps, slots);\n        return children ? _createVNode(VListGroup, {\n          \"value\": itemProps == null ? void 0 : itemProps.value\n        }, {\n          activator: _ref3 => {\n            let {\n              props: activatorProps\n            } = _ref3;\n            return slots.header ? slots.header({ ...itemProps,\n              ...activatorProps\n            }) : _createVNode(VListItem, _mergeProps(itemProps, activatorProps), slots);\n          },\n          default: () => _createVNode(VListChildren, {\n            \"items\": children\n          }, slots)\n        }) : slots.item ? slots.item(itemProps) : _createVNode(VListItem, itemProps, slots);\n      });\n    };\n  }\n\n});","map":{"version":3,"mappings":"qHAAA;;SACSA,gB;SACAC,kB;SACAC,iB;SACAC,sB,wBAET;;SACSC,wB;SACAC,kB,cAET;;AAOA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,GAWxC;AACHG,MAAI,EAAE,eADH;AAGHC,OAAK,EAAE;AACLC,SAAK,EAAEC;AADF,GAHJ;;AAOHC,OAAK,CAAEH,KAAF,QAAoB;AAAA,QAAX;AAAEI;AAAF,QAAWC;AACvBR,cAAU;AAEV,WAAO;AAAA;;AAAA,kDAAMO,KAAK,CAACE,OAAZ,qBAAMC,2BAAN,6CAA2BP,KAAK,CAACC,KAAjC,qBAA2BO,aAAaC,GAAb,CAAiBC,SAA0C;AAAA,YAAzC;AAAEC,kBAAF;AAAYX,eAAK,EAAEY,SAAnB;AAA8BC;AAA9B,YAAyCH;AAC3F,YAAIG,IAAI,KAAK,SAAb,EAAwB,8BAAqBD,SAArB;AAExB,YAAIC,IAAI,KAAK,WAAb,EAA0B,oCAA2BD,SAA3B,EAAgDR,KAAhD;AAE1B,eAAOO,QAAQ;AAAA,mBAEHC,SAFG,QAEHA,GAFG,MAEHA,YAAS,CAAEE;AAFR;AAKTC,mBAAS,EAAEC;AAAA,gBAAC;AAAEhB,mBAAK,EAAEiB;AAAT,gBAADD;AAAA,mBAA+BZ,KAAK,CAACc,MAANd,GACtCA,KAAK,CAACc,MAANd,CAAa,EAAE,GAAGQ,SAAL;AAAgB,iBAAGK;AAAnB,aAAbb,CADsCA,uCAEtBQ,SAFsB,EAELK,cAFK,GAEsBb,KAFtB,CAA/B;AALF;AAQTE,iBAAO,EAAE;AAAA,qBACgBK;AADhB,aACqCP,KADrC;AARA,aAcbA,KAAK,CAACe,IAANf,GAAaA,KAAK,CAACe,IAANf,CAAWQ,SAAXR,CAAbA,2BAAqDQ,SAArD,EAA2ER,KAA3E,CAdF;AALgC,QAA3B;AAAP;AAsBD;;AAhCE,CAXwC,CAAtC","names":["VDivider","VListGroup","VListItem","VListSubheader","genericComponent","createList","VListChildren","name","props","items","Array","setup","slots","_ref","default","_slots$default2","_props$items","map","_ref2","children","itemProps","type","value","activator","_ref3","activatorProps","header","item"],"sources":["../../../src/components/VList/VListChildren.tsx"],"sourcesContent":["// Components\nimport { VDivider } from '../VDivider'\nimport { VListGroup } from './VListGroup'\nimport { VListItem } from './VListItem'\nimport { VListSubheader } from './VListSubheader'\n\n// Utilities\nimport { genericComponent } from '@/util'\nimport { createList } from './list'\n\n// Types\nimport type { InternalListItem } from './VList'\nimport type { ListItemSubtitleSlot, ListItemTitleSlot } from './VListItem'\nimport type { ListGroupActivatorSlot } from './VListGroup'\nimport type { MakeSlots } from '@/util'\nimport type { Prop } from 'vue'\n\nexport const VListChildren = genericComponent<new <T extends InternalListItem>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    default: []\n    header: [ListGroupActivatorSlot]\n    item: [T]\n    title: [ListItemTitleSlot]\n    subtitle: [ListItemSubtitleSlot]\n  }>\n}>()({\n  name: 'VListChildren',\n\n  props: {\n    items: Array as Prop<InternalListItem[]>,\n  },\n\n  setup (props, { slots }) {\n    createList()\n\n    return () => slots.default?.() ?? props.items?.map(({ children, props: itemProps, type }) => {\n      if (type === 'divider') return <VDivider {...itemProps} />\n\n      if (type === 'subheader') return <VListSubheader {...itemProps} v-slots={ slots } />\n\n      return children ? (\n        <VListGroup\n          value={ itemProps?.value }\n        >\n          {{\n            activator: ({ props: activatorProps }) => slots.header\n              ? slots.header({ ...itemProps, ...activatorProps })\n              : <VListItem { ...itemProps } { ...activatorProps } v-slots={ slots } />,\n            default: () => (\n              <VListChildren items={ children } v-slots={ slots } />\n            ),\n          }}\n        </VListGroup>\n      ) : (\n        slots.item ? slots.item(itemProps) : <VListItem { ...itemProps } v-slots={ slots } />\n      )\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}