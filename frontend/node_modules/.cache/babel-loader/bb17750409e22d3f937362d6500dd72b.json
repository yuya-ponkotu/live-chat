{"ast":null,"code":"import { attachedRoot } from \"../../util/index.mjs\";\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n\n  const root = attachedRoot(el);\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  const elements = (typeof binding.value === 'object' && binding.value.include || (() => []))(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  return !elements.some(el => el == null ? void 0 : el.contains(e.target));\n}\n\nfunction checkIsActive(e, binding) {\n  const isActive = typeof binding.value === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\n\nfunction directive(e, el, binding) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\n\nfunction handleShadow(el, callback) {\n  const root = attachedRoot(el);\n  callback(document);\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted(el, binding) {\n    const onClick = e => directive(e, el, binding);\n\n    const onMousedown = e => {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n\n    handleShadow(el, app => {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true\n      };\n    }\n\n    el._clickOutside[binding.instance.$.uid] = {\n      onClick,\n      onMousedown\n    };\n  },\n\n  unmounted(el, binding) {\n    if (!el._clickOutside) return;\n    handleShadow(el, app => {\n      var _el$_clickOutside;\n\n      if (!app || !((_el$_clickOutside = el._clickOutside) != null && _el$_clickOutside[binding.instance.$.uid])) return;\n      const {\n        onClick,\n        onMousedown\n      } = el._clickOutside[binding.instance.$.uid];\n      app.removeEventListener('click', onClick, true);\n      app.removeEventListener('mousedown', onMousedown, true);\n    });\n    delete el._clickOutside[binding.instance.$.uid];\n  }\n\n};\nexport default ClickOutside;","map":{"version":3,"mappings":"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","names":["attachedRoot","defaultConditional","checkEvent","e","el","binding","checkIsActive","root","ShadowRoot","host","target","elements","value","include","push","some","contains","isActive","closeConditional","directive","handler","_clickOutside","lastMousedownWasOutside","setTimeout","handleShadow","callback","document","ClickOutside","mounted","onClick","onMousedown","app","addEventListener","instance","$","uid","unmounted","_el$_clickOutside","removeEventListener"],"sources":["../../../src/directives/click-outside/index.ts"],"sourcesContent":["import { attachedRoot } from '@/util'\nimport type { DirectiveBinding } from 'vue'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: MouseEvent) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirectiveBinding extends DirectiveBinding {\n  value: ((e: MouseEvent) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (\n    typeof ShadowRoot !== 'undefined' &&\n    root instanceof ShadowRoot &&\n    root.host === e.target\n  ) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el?.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: MouseEvent, binding: ClickOutsideDirectiveBinding): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document)\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    const onClick = (e: Event) => directive(e as MouseEvent, el, binding)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as MouseEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true,\n      }\n    }\n\n    el._clickOutside[binding.instance!.$.uid] = {\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unmounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside?.[binding.instance!.$.uid]) return\n\n      const { onClick, onMousedown } = el._clickOutside[binding.instance!.$.uid]!\n\n      app.removeEventListener('click', onClick, true)\n      app.removeEventListener('mousedown', onMousedown, true)\n    })\n\n    delete el._clickOutside[binding.instance!.$.uid]\n  },\n}\n\nexport default ClickOutside\n"]},"metadata":{},"sourceType":"module"}