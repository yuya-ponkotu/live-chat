{"ast":null,"code":"/* eslint-disable sonarjs/no-identical-functions */\nexport const independentSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref => {\n      let {\n        id,\n        value,\n        selected\n      } = _ref; // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {\n          let [key, value] = _ref2;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: v => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const independentSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref3 => {\n      let {\n        selected,\n        id,\n        ...rest\n      } = _ref3;\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select({ ...rest,\n        id,\n        selected: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      if (v != null && v.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n\n      return map;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref4 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref4;\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref5 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref5;\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref6 => {\n      let {\n        id,\n        value,\n        selected,\n        children,\n        parents\n      } = _ref6;\n      const original = new Map(selected);\n      const items = [id];\n\n      while (items.length) {\n        const item = items.shift();\n        selected.set(item, value ? 'on' : 'off');\n\n        if (children.has(item)) {\n          items.push(...children.get(item));\n        }\n      }\n\n      let parent = parents.get(id);\n\n      while (parent) {\n        const childrenIds = children.get(parent);\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = parents.get(parent);\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {\n          let [key, value] = _ref7;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: (v, children) => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["independentSelectStrategy","mandatory","strategy","select","_ref","id","value","selected","on","Array","from","entries","reduce","arr","key","_ref2","length","set","in","v","children","parents","map","Map","out","push","independentSingleSelectStrategy","parentStrategy","_ref3","rest","singleSelected","has","get","slice","leafSelectStrategy","_ref4","leafSingleSelectStrategy","_ref5","classicSelectStrategy","_ref6","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected","_ref7"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\nexport type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return map\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(item, value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = parents.get(id)\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = parents.get(parent)\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}