{"ast":null,"code":"import { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VList.css\"; // Components\n\nimport { VListChildren } from \"./VListChildren.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeNestedProps, useNested } from \"../../composables/nested/nested.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { createList } from \"./list.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nconst parseItems = items => {\n  if (!items) return undefined;\n  return items.map(item => {\n    if (typeof item === 'string') return {\n      type: 'item',\n      value: item,\n      title: item\n    };\n    const {\n      $type,\n      $children,\n      ...props\n    } = item;\n    if ($type === 'subheader') return {\n      type: 'subheader',\n      props\n    };\n    if ($type === 'divider') return {\n      type: 'divider',\n      props\n    };\n    return {\n      type: 'item',\n      props,\n      children: parseItems($children)\n    };\n  });\n};\n\nexport const VList = genericComponent()({\n  name: 'VList',\n  props: {\n    activeColor: String,\n    activeClass: String,\n    bgColor: String,\n    disabled: Boolean,\n    lines: {\n      type: [Boolean, String],\n      default: 'one'\n    },\n    nav: Boolean,\n    items: Array,\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf',\n      openStrategy: 'multiple'\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'text'\n    })\n  },\n  emits: {\n    'update:selected': val => true,\n    'update:opened': val => true,\n    'click:open': value => true,\n    'click:select': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const items = computed(() => parseItems(props.items));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      open,\n      select\n    } = useNested(props);\n    const lineClasses = computed(() => props.lines ? `v-list--${props.lines}-line` : undefined);\n    const activeColor = toRef(props, 'activeColor');\n    const color = toRef(props, 'color');\n    createList();\n    provideDefaults({\n      VListGroup: {\n        activeColor,\n        color\n      },\n      VListItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        nav: toRef(props, 'nav'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(() => {\n      return _createVNode(props.tag, {\n        \"class\": ['v-list', {\n          'v-list--disabled': props.disabled,\n          'v-list--nav': props.nav\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, lineClasses.value, roundedClasses.value],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value]\n      }, {\n        default: () => [_createVNode(VListChildren, {\n          \"items\": items.value\n        }, slots)]\n      });\n    });\n    return {\n      open,\n      select\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VListChildren","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","makeThemeProps","provideTheme","makeNestedProps","useNested","makeVariantProps","createList","provideDefaults","computed","toRef","genericComponent","useRender","parseItems","items","undefined","map","item","type","value","title","$type","$children","props","children","VList","name","activeColor","String","activeClass","bgColor","disabled","Boolean","lines","default","nav","Array","selectStrategy","openStrategy","variant","emits","val","setup","slots","_ref","themeClasses","backgroundColorClasses","backgroundColorStyles","borderClasses","densityClasses","dimensionStyles","elevationClasses","roundedClasses","open","select","lineClasses","color","VListGroup","VListItem","density"],"sources":["../../../src/components/VList/VList.tsx"],"sourcesContent":["// Styles\nimport './VList.sass'\n\n// Components\nimport { VListChildren } from './VListChildren'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeNestedProps, useNested } from '@/composables/nested/nested'\nimport { makeVariantProps } from '@/composables/variant'\nimport { createList } from './list'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { Prop, PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { ListGroupActivatorSlot } from './VListGroup'\n\nexport type ListItem = {\n  [key: string]: any\n  $type?: 'item' | 'subheader' | 'divider'\n  $children?: (string | ListItem)[]\n}\n\nexport type InternalListItem = {\n  type?: 'item' | 'subheader' | 'divider'\n  props?: Record<string, any>\n  children?: InternalListItem[]\n}\n\nconst parseItems = (items?: (string | ListItem)[]): InternalListItem[] | undefined => {\n  if (!items) return undefined\n\n  return items.map(item => {\n    if (typeof item === 'string') return { type: 'item', value: item, title: item }\n\n    const { $type, $children, ...props } = item\n\n    if ($type === 'subheader') return { type: 'subheader', props }\n    if ($type === 'divider') return { type: 'divider', props }\n\n    return { type: 'item', props, children: parseItems($children) }\n  })\n}\n\nexport const VList = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    subheader: []\n    header: [ListGroupActivatorSlot]\n    item: [T]\n  }>\n}>()({\n  name: 'VList',\n\n  props: {\n    activeColor: String,\n    activeClass: String,\n    bgColor: String,\n    disabled: Boolean,\n    lines: {\n      type: [Boolean, String] as PropType<'one' | 'two' | 'three' | false>,\n      default: 'one',\n    },\n    nav: Boolean,\n    items: Array as Prop<ListItem[]>,\n\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf' as const,\n      openStrategy: 'multiple' as const,\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'text' } as const),\n  },\n\n  emits: {\n    'update:selected': (val: string[]) => true,\n    'update:opened': (val: string[]) => true,\n    'click:open': (value: { id: string, value: boolean, path: string[] }) => true,\n    'click:select': (value: { id: string, value: boolean, path: string[] }) => true,\n  },\n\n  setup (props, { slots }) {\n    const items = computed(() => parseItems(props.items))\n    const { themeClasses } = provideTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { open, select } = useNested(props)\n    const lineClasses = computed(() => props.lines ? `v-list--${props.lines}-line` : undefined)\n    const activeColor = toRef(props, 'activeColor')\n    const color = toRef(props, 'color')\n\n    createList()\n\n    provideDefaults({\n      VListGroup: {\n        activeColor,\n        color,\n      },\n      VListItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        nav: toRef(props, 'nav'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      return (\n        <props.tag\n          class={[\n            'v-list',\n            {\n              'v-list--disabled': props.disabled,\n              'v-list--nav': props.nav,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            lineClasses.value,\n            roundedClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            dimensionStyles.value,\n          ]}\n        >\n          <VListChildren items={ items.value } v-slots={ slots }></VListChildren>\n        </props.tag>\n      )\n    })\n\n    return {\n      open,\n      select,\n    }\n  },\n})\n\nexport type VList = InstanceType<typeof VList>\n"]},"metadata":{},"sourceType":"module"}