{"ast":null,"code":"import { createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VSelect.css\"; // Components\n\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, ref, watch } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport function genItem(item) {\n  var _ref;\n\n  return {\n    title: String((_ref = typeof item === 'object' ? item.title : item) != null ? _ref : ''),\n    value: typeof item === 'object' ? item.value : item\n  };\n}\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array,\n    default: () => []\n  },\n  menuIcon: {\n    type: String,\n    default: '$dropdown'\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    default: () => []\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  openOnClear: Boolean\n}, 'select');\nexport const VSelect = genericComponent()({\n  name: 'VSelect',\n  props: { ...makeSelectProps(),\n    ...makeTransitionProps({\n      transition: 'scale-transition'\n    })\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const activator = ref();\n    const menu = ref(false);\n    const items = computed(() => props.items.map(genItem));\n    const model = useProxiedModel(props, 'modelValue', [], v => wrapInArray(v), v => props.multiple ? v : v[0]);\n    const selections = computed(() => items.value.filter(item => model.value.includes(item.value)));\n    const selected = computed(() => selections.value.map(selection => selection.value));\n\n    function onClear(e) {\n      model.value = [];\n\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n\n    function onClickControl() {\n      if (props.hideNoData && !items.value.length) return;\n      menu.value = true;\n    }\n\n    function onKeydown(e) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n    }\n\n    function select(item) {\n      if (props.multiple) {\n        const index = selections.value.findIndex(selection => selection.value === item.value);\n\n        if (index === -1) {\n          model.value.push(item.value);\n        } else {\n          model.value = selected.value.filter(selection => selection !== item.value);\n        }\n      } else {\n        model.value = [item.value];\n        menu.value = false;\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control');\n    });\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      return _createVNode(VTextField, {\n        \"ref\": vTextFieldRef,\n        \"class\": ['v-select', {\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips,\n          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": true,\n        \"onClick:clear\": onClear,\n        \"onClick:input\": onClickControl,\n        \"onClick:control\": onClickControl,\n        \"onBlur\": () => menu.value = false,\n        \"modelValue\": model.value.join(', '),\n        \"onKeydown\": onKeydown\n      }, { ...slots,\n        default: () => _createVNode(_Fragment, null, [activator.value && _createVNode(VMenu, {\n          \"modelValue\": menu.value,\n          \"onUpdate:modelValue\": $event => menu.value = $event,\n          \"activator\": activator.value,\n          \"contentClass\": \"v-select__content\",\n          \"eager\": props.eager,\n          \"openOnClick\": false,\n          \"transition\": props.transition\n        }, {\n          default: () => [_createVNode(VList, {\n            \"selected\": selected.value,\n            \"selectStrategy\": props.multiple ? 'independent' : 'single-independent'\n          }, {\n            default: () => [!items.value.length && !props.hideNoData && _createVNode(VListItem, {\n              \"title\": t(props.noDataText)\n            }, null), items.value.map(item => _createVNode(VListItem, {\n              \"title\": item.title,\n              \"value\": item.value,\n              \"onMousedown\": e => e.preventDefault(),\n              \"onClick\": () => select(item)\n            }, null))]\n          })]\n        }), selections.value.map((selection, index) => {\n          function onChipClose(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            select(selection);\n          }\n\n          const slotProps = {\n            'onClick:close': onChipClose,\n            modelValue: true\n          };\n          return _createVNode(\"div\", {\n            \"class\": \"v-select__selection\"\n          }, [hasChips && _createVNode(VDefaultsProvider, {\n            \"defaults\": {\n              VChip: {\n                closable: props.closableChips,\n                size: 'small',\n                text: selection.title\n              }\n            }\n          }, {\n            default: () => [slots.chip ? slots.chip({\n              props: slotProps,\n              selection\n            }) : _createVNode(VChip, slotProps, null)]\n          }), !hasChips && (slots.selection ? slots.selection({\n            selection\n          }) : _createVNode(\"span\", {\n            \"class\": \"v-select__selection-text\"\n          }, [selection.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n            \"class\": \"v-select__selection-comma\"\n          }, [_createTextVNode(\",\")])]))]);\n        })])\n      });\n    });\n    return useForwardRef({}, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"+GAAA;;AACA,uB,CAEA;;SACSA,a;SACAC,yB;SACAC,OAAOC,iB;SACPC,a;SACAC,kB,2BAET;;SACSC,2B;SACAC,qB;SACAC,iB;SACAC,uB,sCAET;;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,KAAxB,QAAqC,KAArC;SACSC,kBAAkBC,cAAcC,WAAWC,mB,wBAEpD;;AA0BA,OAAO,SAASC,OAAT,CAAkBC,IAAlB,EAA6B;AAAA;;AAClC,SAAO;AACLC,SAAK,EAAEC,MAAM,SAAE,OAAOF,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACC,KAAhC,GAAwCD,IAA1C,mBAAmD,EAAnD,CADR;AAELG,SAAK,EAAG,OAAOH,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACG,KAAhC,GAAwCH;AAF3C,GAAP;AAID;AAED,OAAO,MAAMI,eAAe,GAAGR,YAAY,CAAC;AAC1CS,OAAK,EAAEC,OADmC;AAE1CC,eAAa,EAAED,OAF2B;AAG1CE,OAAK,EAAEF,OAHmC;AAI1CG,YAAU,EAAEH,OAJ8B;AAK1CI,cAAY,EAAEJ,OAL4B;AAM1CK,OAAK,EAAE;AACLC,QAAI,EAAEC,KADD;AAELC,WAAO,EAAE,MAAO;AAFX,GANmC;AAU1CC,UAAQ,EAAE;AACRH,QAAI,EAAEV,MADE;AAERY,WAAO,EAAE;AAFD,GAVgC;AAc1CE,YAAU,EAAE;AACVJ,QAAI,EAAE,CAACK,MAAD,EAASf,MAAT,EAAiBW,KAAjB,CADI;AAEVC,WAAO,EAAE,MAAO;AAFN,GAd8B;AAkB1CI,UAAQ,EAAEZ,OAlBgC;AAmB1Ca,YAAU,EAAE;AACVP,QAAI,EAAEV,MADI;AAEVY,WAAO,EAAE;AAFC,GAnB8B;AAuB1CM,aAAW,EAAEd;AAvB6B,CAAD,EAwBxC,QAxBwC,CAApC;AA0BP,OAAO,MAAMe,OAAO,GAAG1B,gBAAgB,GAMlC;AACH2B,MAAI,EAAE,SADH;AAGHC,OAAK,EAAE,EACL,GAAGnB,eAAe,EADb;AAEL,OAAGhB,mBAAmB,CAAC;AAAEoC,gBAAU,EAAE;AAAd,KAAD;AAFjB,GAHJ;AAQHC,OAAK,EAAE;AACL,yBAAsBC,GAAD,IAAc;AAD9B,GARJ;;AAYHC,OAAK,CAAEJ,KAAF,SAAoB;AAAA,QAAX;AAAEK;AAAF,QAAWC;AACvB,UAAM;AAAEC;AAAF,QAAQxC,SAAS,EAAvB;AACA,UAAMyC,aAAa,GAAGtC,GAAG,EAAzB;AACA,UAAMuC,SAAS,GAAGvC,GAAG,EAArB;AACA,UAAMwC,IAAI,GAAGxC,GAAG,CAAC,KAAD,CAAhB;AACA,UAAMkB,KAAK,GAAGnB,QAAQ,CAAC,MAAM+B,KAAK,CAACZ,KAANY,CAAYW,GAAZX,CAAgBxB,OAAhBwB,CAAP,CAAtB;AACA,UAAMY,KAAK,GAAG5C,eAAe,CAC3BgC,KAD2B,EAE3B,YAF2B,EAG3B,EAH2B,EAI3Ba,CAAC,IAAItC,WAAW,CAACsC,CAAD,CAJW,EAK1BA,CAAD,IAAYb,KAAK,CAACL,QAANK,GAAiBa,CAAjBb,GAAqBa,CAAC,CAAC,CAAD,CALP,CAA7B;AAOA,UAAMC,UAAU,GAAG7C,QAAQ,CAAC,MAAMmB,KAAK,CAACR,KAANQ,CAAY2B,MAAZ3B,CAAmBX,IAAI,IAAImC,KAAK,CAAChC,KAANgC,CAAYI,QAAZJ,CAAqBnC,IAAI,CAACG,KAA1BgC,CAA3BxB,CAAP,CAA3B;AACA,UAAM6B,QAAQ,GAAGhD,QAAQ,CAAC,MAAM6C,UAAU,CAAClC,KAAXkC,CAAiBH,GAAjBG,CAAqBI,SAAS,IAAIA,SAAS,CAACtC,KAA5CkC,CAAP,CAAzB;;AAEA,aAASK,OAAT,CAAkBC,CAAlB,EAAiC;AAC/BR,WAAK,CAAChC,KAANgC,GAAc,EAAdA;;AAEA,UAAIZ,KAAK,CAACH,WAAV,EAAuB;AACrBa,YAAI,CAAC9B,KAAL8B,GAAa,IAAbA;AACD;AACF;;AACD,aAASW,cAAT,GAA2B;AACzB,UAAIrB,KAAK,CAACd,UAANc,IAAoB,CAACZ,KAAK,CAACR,KAANQ,CAAYkC,MAArC,EAA6C;AAE7CZ,UAAI,CAAC9B,KAAL8B,GAAa,IAAbA;AACD;;AACD,aAASa,SAAT,CAAoBH,CAApB,EAAsC;AACpC,UAAI,CAAC,OAAD,EAAU,WAAV,EAAuB,GAAvB,EAA4BJ,QAA5B,CAAqCI,CAAC,CAACI,GAAvC,CAAJ,EAAiD;AAC/Cd,YAAI,CAAC9B,KAAL8B,GAAa,IAAbA;AACD;;AAED,UAAI,CAAC,QAAD,EAAW,KAAX,EAAkBM,QAAlB,CAA2BI,CAAC,CAACI,GAA7B,CAAJ,EAAuC;AACrCd,YAAI,CAAC9B,KAAL8B,GAAa,KAAbA;AACD;AACF;;AACD,aAASe,MAAT,CAAiBhD,IAAjB,EAA4B;AAC1B,UAAIuB,KAAK,CAACL,QAAV,EAAoB;AAClB,cAAM+B,KAAK,GAAGZ,UAAU,CAAClC,KAAXkC,CAAiBa,SAAjBb,CAA2BI,SAAS,IAAIA,SAAS,CAACtC,KAAVsC,KAAoBzC,IAAI,CAACG,KAAjEkC,CAAd;;AAEA,YAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBd,eAAK,CAAChC,KAANgC,CAAYgB,IAAZhB,CAAiBnC,IAAI,CAACG,KAAtBgC;AADF,eAEO;AACLA,eAAK,CAAChC,KAANgC,GAAcK,QAAQ,CAACrC,KAATqC,CAAeF,MAAfE,CAAsBC,SAAS,IAAIA,SAAS,KAAKzC,IAAI,CAACG,KAAtDqC,CAAdL;AACD;AAPH,aAQO;AACLA,aAAK,CAAChC,KAANgC,GAAc,CAACnC,IAAI,CAACG,KAAN,CAAdgC;AACAF,YAAI,CAAC9B,KAAL8B,GAAa,KAAbA;AACD;AACF;;AAEDvC,SAAK,CAAC,MAAMqC,aAAa,CAAC5B,KAArB,EAA4BuB,GAAG,IAAI;AACtCM,eAAS,CAAC7B,KAAV6B,GAAkBN,GAAG,CAAC0B,GAAJ1B,CAAQ2B,aAAR3B,CAAsB,mBAAtBA,CAAlBM;AADG,MAALtC;AAIAG,aAAS,CAAC,MAAM;AACd,YAAMyD,QAAQ,GAAG,CAAC,EAAE/B,KAAK,CAAClB,KAANkB,IAAeK,KAAK,CAAC2B,IAAvB,CAAlB;AAEA;AAAA,eAEUxB,aAFV;AAAA,iBAGW,CACL,UADK,EAEL;AACE,mCAAyBE,IAAI,CAAC9B,KADhC;AAEE,6BAAmB,CAAC,CAACoB,KAAK,CAAClB,KAF7B;AAGE,WAAE,aAAYkB,KAAK,CAACL,QAANK,GAAiB,UAAjBA,GAA8B,QAAS,EAArD,GAAyD;AAH3D,SAFK,CAHX;AAAA,2BAWsBA,KAAK,CAACR,QAX5B;AAAA;AAAA,yBAaoB2B,OAbpB;AAAA,yBAcoBE,cAdpB;AAAA,2BAesBA,cAftB;AAAA,kBAgBa,MAAMX,IAAI,CAAC9B,KAAL8B,GAAa,KAhBhC;AAAA,sBAiBiBE,KAAK,CAAChC,KAANgC,CAAYqB,IAAZrB,CAAiB,IAAjBA,CAjBjB;AAAA,qBAkBgBW;AAlBhB,WAqBM,GAAGlB,KArBT;AAsBMd,eAAO,EAAE,qCAEHkB,SAAS,CAAC7B,KAAV6B;AAAA,wBAEYC,IAAI,CAAC9B,KAFjB;AAAA,2CAEY8B,IAAI,CAAC9B,KAAL8B,GAFZwB;AAAA,uBAGczB,SAAS,CAAC7B,KAHxB;AAAA,0BAIe,mBAJf;AAAA,mBAKUoB,KAAK,CAACf,KALhB;AAAA,yBAMgB,KANhB;AAAA,wBAOee,KAAK,CAACC;AAPrB;AAAAV;AAAA,wBAUe0B,QAAQ,CAACrC,KAVxB;AAAA,8BAWqBoB,KAAK,CAACL,QAANK,GAAiB,aAAjBA,GAAiC;AAXtD;AAAAT,4BAaM,CAACH,KAAK,CAACR,KAANQ,CAAYkC,MAAb,IAAuB,CAACtB,KAAK,CAACd,UAA9B;AAAA,uBACmBqB,CAAC,CAACP,KAAK,CAACJ,UAAP;AADpB,oBAbN,EAiBMR,KAAK,CAACR,KAANQ,CAAYuB,GAAZvB,CAAgBX,IAAI;AAAA,uBAEVA,IAAI,CAACC,KAFK;AAAA,uBAGVD,IAAI,CAACG,KAHK;AAAA,6BAIHwC,CAAD,IAAmBA,CAAC,CAACe,cAAFf,EAJf;AAAA,yBAKR,MAAMK,MAAM,CAAChD,IAAD;AALJ,oBAApBW,CAjBN;AAAA;AAAA,UAFG,EA+BH0B,UAAU,CAAClC,KAAXkC,CAAiBH,GAAjBG,CAAqB,CAACI,SAAD,EAAYQ,KAAZ,KAAsB;AAC3C,mBAASU,WAAT,CAAsBhB,CAAtB,EAAgC;AAC9BA,aAAC,CAACiB,eAAFjB;AACAA,aAAC,CAACe,cAAFf;AAEAK,kBAAM,CAACP,SAAD,CAANO;AACD;;AAED,gBAAMa,SAAS,GAAG;AAChB,6BAAiBF,WADD;AAEhB3C,sBAAU,EAAE;AAFI,WAAlB;AAKA;AAAA,qBACa;AADb,cAEMsC,QAAQ;AAAA,wBAEI;AACRxE,mBAAK,EAAE;AACLgF,wBAAQ,EAAEvC,KAAK,CAAChB,aADX;AAELwD,oBAAI,EAAE,OAFD;AAGLC,oBAAI,EAAEvB,SAAS,CAACxC;AAHX;AADC;AAFJ;AAAAa,4BAUJc,KAAK,CAAC2B,IAAN3B,GACEA,KAAK,CAAC2B,IAAN3B,CAAW;AAAEL,mBAAK,EAAEsC,SAAT;AAAoBpB;AAApB,aAAXb,CADFA,uBAEeiC,SAFf,OAVI;AAAA,YAFd,EAmBM,CAACP,QAAD,KACA1B,KAAK,CAACa,SAANb,GACIA,KAAK,CAACa,SAANb,CAAgB;AAAEa;AAAF,WAAhBb,CADJA;AAAA,qBAGgB;AAHhB,cAIQa,SAAS,CAACxC,KAJlB,EAKQsB,KAAK,CAACL,QAANK,IAAmB0B,KAAK,GAAGZ,UAAU,CAAClC,KAAXkC,CAAiBQ,MAAjBR,GAA0B,CAArDd;AAAA,qBACY;AADZ,qCALR,EADA,CAnBN;AAbA,UA/BG;AAtBf;AAHO,MAAT1B;AA8GA,WAAOR,aAAa,CAAC,EAAD,EAAK0C,aAAL,CAApB;AACD;;AAnLE,CANkC,CAAhC","names":["VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","makeTransitionProps","useForwardRef","useLocale","useProxiedModel","computed","ref","watch","genericComponent","propsFactory","useRender","wrapInArray","genItem","item","title","String","value","makeSelectProps","chips","Boolean","closableChips","eager","hideNoData","hideSelected","items","type","Array","default","menuIcon","modelValue","Number","multiple","noDataText","openOnClear","VSelect","name","props","transition","emits","val","setup","slots","_ref2","t","vTextFieldRef","activator","menu","map","model","v","selections","filter","includes","selected","selection","onClear","e","onClickControl","length","onKeydown","key","select","index","findIndex","push","$el","querySelector","hasChips","chip","join","$event","preventDefault","onChipClose","stopPropagation","slotProps","closable","size","text"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref, watch } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport interface InternalSelectItem {\n  title: string\n  value: any\n  index: number\n}\n\nexport interface DefaultSelectionSlot {\n  selection: InternalSelectItem\n}\n\nexport interface DefaultChipSlot extends DefaultSelectionSlot {\n  props: {\n    'onClick:close': (e: Event) => void\n    modelValue: any\n  }\n}\n\nexport type SelectItem = string | (string | number)[] | ((item: Record<string, any>, fallback?: any) => any) | (LinkProps & {\n  text: string\n})\n\nexport function genItem (item: any) {\n  return {\n    title: String((typeof item === 'object' ? item.title : item) ?? ''),\n    value: (typeof item === 'object' ? item.value : item),\n  }\n}\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array as PropType<SelectItem[]>,\n    default: () => ([]),\n  },\n  menuIcon: {\n    type: String,\n    default: '$dropdown',\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    default: () => ([]),\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n}, 'select')\n\nexport const VSelect = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    chip: [DefaultChipSlot]\n    default: []\n    selection: [DefaultSelectionSlot]\n  }>\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: 'scale-transition' }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const activator = ref()\n    const menu = ref(false)\n    const items = computed(() => props.items.map(genItem))\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => wrapInArray(v),\n      (v: any) => props.multiple ? v : v[0]\n    )\n    const selections = computed(() => items.value.filter(item => model.value.includes(item.value)))\n    const selected = computed(() => selections.value.map(selection => selection.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (props.hideNoData && !items.value.length) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n    }\n    function select (item: any) {\n      if (props.multiple) {\n        const index = selections.value.findIndex(selection => selection.value === item.value)\n\n        if (index === -1) {\n          model.value.push(item.value)\n        } else {\n          model.value = selected.value.filter(selection => selection !== item.value)\n        }\n      } else {\n        model.value = [item.value]\n        menu.value = false\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control')\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:input={ onClickControl }\n          onClick:control={ onClickControl }\n          onBlur={ () => menu.value = false }\n          modelValue={ model.value.join(', ') }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                { activator.value && (\n                  <VMenu\n                    v-model={ menu.value }\n                    activator={ activator.value }\n                    contentClass=\"v-select__content\"\n                    eager={ props.eager }\n                    openOnClick={ false }\n                    transition={ props.transition }\n                  >\n                    <VList\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    >\n                      { !items.value.length && !props.hideNoData && (\n                        <VListItem title={ t(props.noDataText) } />\n                      ) }\n\n                      { items.value.map(item => (\n                        <VListItem\n                          title={ item.title }\n                          value={ item.value }\n                          onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                          onClick={ () => select(item) }\n                        />\n                      )) }\n                    </VList>\n                  </VMenu>\n                ) }\n\n                { selections.value.map((selection, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(selection)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                  }\n\n                  return (\n                    <div class=\"v-select__selection\">\n                      { hasChips && (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: selection.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ props: slotProps, selection })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) }\n\n                      { !hasChips && (\n                        slots.selection\n                          ? slots.selection({ selection })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { selection.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      ) }\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return useForwardRef({}, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}