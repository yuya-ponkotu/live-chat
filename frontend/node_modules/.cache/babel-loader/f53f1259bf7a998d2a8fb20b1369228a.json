{"ast":null,"code":"import { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VExpandTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { useList } from \"./list.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useNestedGroupActivator, useNestedItem } from \"../../composables/nested/nested.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, genericComponent } from \"../../util/index.mjs\"; // Types\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup(_, _ref) {\n    let {\n      slots\n    } = _ref;\n    useNestedGroupActivator();\n    return () => {\n      var _slots$default;\n\n      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n    };\n  }\n\n});\nexport const VListGroup = genericComponent()({\n  name: 'VListGroup',\n  props: {\n    activeColor: String,\n    color: String,\n    collapseIcon: {\n      type: String,\n      default: '$collapse'\n    },\n    expandIcon: {\n      type: String,\n      default: '$expand'\n    },\n    value: null,\n    ...makeTagProps()\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      isOpen,\n      open\n    } = useNestedItem(toRef(props, 'value'), true);\n    const list = useList();\n\n    const onClick = e => {\n      open(!isOpen.value, e);\n    };\n\n    const activatorProps = computed(() => {\n      var _props$activeColor;\n\n      return {\n        onClick,\n        appendIcon: isOpen.value ? props.collapseIcon : props.expandIcon,\n        class: 'v-list-group__header',\n        color: isOpen.value ? (_props$activeColor = props.activeColor) != null ? _props$activeColor : props.color : undefined\n      };\n    });\n    return () => {\n      var _slots$default2;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-list-group', {\n          'v-list-group--prepend': list == null ? void 0 : list.hasPrepend.value\n        }]\n      }, {\n        default: () => [slots.activator && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VListItemIcon: {\n              color: activatorProps.value.color\n            }\n          }\n        }, {\n          default: () => [_createVNode(VListGroupActivator, null, {\n            default: () => [slots.activator({\n              props: activatorProps.value,\n              isOpen\n            })]\n          })]\n        }), _createVNode(VExpandTransition, null, {\n          default: () => [_withDirectives(_createVNode(\"div\", {\n            \"class\": \"v-list-group__items\"\n          }, [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]), [[_vShow, isOpen.value]])]\n        })]\n      });\n    };\n  }\n\n});","map":{"version":3,"mappings":"uGAAA;;SACSA,yB;SACAC,yB,4BAET;;SACSC,e;SACAC,oB;SACAC,yBAAyBC,qB,uCAElC;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,iBAAiBC,wB,wBAE1B;;AAcA,MAAMC,mBAAmB,GAAGF,eAAe,CAAC;AAC1CG,MAAI,EAAE,qBADoC;;AAG1CC,OAAK,CAAEC,CAAF,QAAgB;AAAA,QAAX;AAAEC;AAAF,QAAWC;AACnBX,2BAAuB;AAEvB,WAAO;AAAA;;AAAA,+BAAMU,KAAK,CAACE,OAAZ,qBAAMC,0BAAN;AAAP;AACD;;AAPyC,CAAD,CAA3C;AAUA,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,GAQrC;AACHE,MAAI,EAAE,YADH;AAGHQ,OAAK,EAAE;AACLC,eAAW,EAAEC,MADR;AAELC,SAAK,EAAED,MAFF;AAGLE,gBAAY,EAAE;AACZC,UAAI,EAAEH,MADM;AAEZL,aAAO,EAAE;AAFG,KAHT;AAOLS,cAAU,EAAE;AACVD,UAAI,EAAEH,MADI;AAEVL,aAAO,EAAE;AAFC,KAPP;AAWLU,SAAK,EAAE,IAXF;AAaL,OAAGvB,YAAY;AAbV,GAHJ;;AAmBHS,OAAK,CAAEO,KAAF,SAAoB;AAAA,QAAX;AAAEL;AAAF,QAAWa;AACvB,UAAM;AAAEC,YAAF;AAAUC;AAAV,QAAmBxB,aAAa,CAACE,KAAK,CAACY,KAAD,EAAQ,OAAR,CAAN,EAAwB,IAAxB,CAAtC;AACA,UAAMW,IAAI,GAAG5B,OAAO,EAApB;;AAEA,UAAM6B,OAAO,GAAIC,CAAD,IAAc;AAC5BH,UAAI,CAAC,CAACD,MAAM,CAACF,KAAT,EAAgBM,CAAhB,CAAJH;AADF;;AAIA,UAAMI,cAAoD,GAAG3B,QAAQ,CAAC;AAAA;;AAAA,aAAO;AAC3EyB,eAD2E;AAE3EG,kBAAU,EAAEN,MAAM,CAACF,KAAPE,GAAeT,KAAK,CAACI,YAArBK,GAAoCT,KAAK,CAACM,UAFqB;AAG3EU,aAAK,EAAE,sBAHoE;AAI3Eb,aAAK,EAAEM,MAAM,CAACF,KAAPE,yBAAeT,KAAK,CAACC,WAArB,iCAAoCD,KAAK,CAACG,KAA1CM,GAAkDQ;AAJkB,OAAP;AAAD,MAArE;AAOA,WAAO,MAAM;AAAA;;AACX;AAAA,iBAEW,CACL,cADK,EAEL;AACE,mCAAyBN,IAAzB,QAAyBA,GAAzB,MAAyBA,OAAI,CAAEO,UAANP,CAAiBJ;AAD5C,SAFK;AAFX;AAAAV,wBASMF,KAAK,CAACwB,SAANxB;AAAA,sBAEY;AACRyB,yBAAa,EAAE;AAAEjB,mBAAK,EAAEW,cAAc,CAACP,KAAfO,CAAqBX;AAA9B;AADP;AAFZ;AAAAN;AAAAA,4BAOMF,KAAK,CAACwB,SAANxB,CAAgB;AAAEK,mBAAK,EAAEc,cAAc,CAACP,KAAxB;AAA+BE;AAA/B,aAAhBd,CAPN;AAAA;AAAA,UATN;AAAAE;AAAA,qBAqBiB;AArBjB,iCAsBUF,KAAK,CAACE,OAtBhB,qBAsBUwB,2BAtBV,cAqB+CZ,MAAM,CAACF,KArBtD;AAAA;AAAA;AADF;AA6BD;;AA/DE,CARqC,CAAnC","names":["VDefaultsProvider","VExpandTransition","useList","makeTagProps","useNestedGroupActivator","useNestedItem","computed","toRef","defineComponent","genericComponent","VListGroupActivator","name","setup","_","slots","_ref","default","_slots$default","VListGroup","props","activeColor","String","color","collapseIcon","type","expandIcon","value","_ref2","isOpen","open","list","onClick","e","activatorProps","appendIcon","class","undefined","hasPrepend","activator","VListItemIcon","_slots$default2"],"sources":["../../../src/components/VList/VListGroup.tsx"],"sourcesContent":["// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { useList } from './list'\nimport { makeTagProps } from '@/composables/tag'\nimport { useNestedGroupActivator, useNestedItem } from '@/composables/nested/nested'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, genericComponent } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { InternalListItem } from './VList'\n\nexport type ListGroupActivatorSlot = {\n  props: {\n    onClick: (e: Event) => void\n    appendIcon: string\n    class: string\n    color?: string\n  }\n}\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup (_, { slots }) {\n    useNestedGroupActivator()\n\n    return () => slots.default?.()\n  },\n})\n\nexport const VListGroup = genericComponent<new <T extends InternalListItem>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    activator: [ListGroupActivatorSlot]\n    default: []\n  }>\n}>()({\n  name: 'VListGroup',\n\n  props: {\n    activeColor: String,\n    color: String,\n    collapseIcon: {\n      type: String,\n      default: '$collapse',\n    },\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    value: null,\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const { isOpen, open } = useNestedItem(toRef(props, 'value'), true)\n    const list = useList()\n\n    const onClick = (e: Event) => {\n      open(!isOpen.value, e)\n    }\n\n    const activatorProps: Ref<ListGroupActivatorSlot['props']> = computed(() => ({\n      onClick,\n      appendIcon: isOpen.value ? props.collapseIcon : props.expandIcon,\n      class: 'v-list-group__header',\n      color: isOpen.value ? props.activeColor ?? props.color : undefined,\n    }))\n\n    return () => {\n      return (\n        <props.tag\n          class={[\n            'v-list-group',\n            {\n              'v-list-group--prepend': list?.hasPrepend.value,\n            },\n          ]}\n        >\n          { slots.activator && (\n            <VDefaultsProvider\n              defaults={{\n                VListItemIcon: { color: activatorProps.value.color },\n              }}\n            >\n              <VListGroupActivator>\n                { slots.activator({ props: activatorProps.value, isOpen }) }\n              </VListGroupActivator>\n            </VDefaultsProvider>\n          ) }\n          <VExpandTransition>\n            <div class=\"v-list-group__items\" v-show={isOpen.value}>\n              { slots.default?.() }\n            </div>\n          </VExpandTransition>\n        </props.tag>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}